ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]=="-Inf",i] <- 0 #if there is no data, then there was no trip
}
#sigma processing
for (i in grep('sigma', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', ml_data[,grep('thy_resv', colnames(ml_data), value=T)], value = T,invert=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data), value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]!=1,i] <- 0
ml_data[ml_data[,i]=="-Inf",i] <- 0 #if there is no data, then there was no trip
}
#swrd
for (i in grep('swrd', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
ml_data[ml_data[,i]=="-Inf",i] <- 0
}
#temp
for (i in grep('temp', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
return(ml_data)
})
ml_data <- do.call(rbind, test)
#Combined ML data set
test <- lapply(1:length(feature_variables), function(i) {
month <- feature_variables[[i]][5]
ml_data <- read.csv(paste0("jitter_ml_data_", month, ".csv"))
#pjtn processing
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T, invert = T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]=="-Inf",i] <- 0 #if there is no data, then there was no trip
}
#sigma processing
for (i in grep('sigma', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', ml_data[,grep('thy_resv', colnames(ml_data), value=T)], value = T,invert=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
print('issue')
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data), value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]!=1,i] <- 0
ml_data[ml_data[,i]=="-Inf",i] <- 0 #if there is no data, then there was no trip
}
#swrd
for (i in grep('swrd', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
ml_data[ml_data[,i]=="-Inf",i] <- 0
}
#temp
for (i in grep('temp', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
return(ml_data)
})
grep('thy_resv_high_var', ml_data[,grep('thy_resv', colnames(ml_data), value=T)], value = T,invert=T)
ml_data[,grep('thy_resv', colnames(ml_data), value=T)]
grep('thy_resv_high_var', colnames(ml_data[,grep('thy_resv', colnames(ml_data), value=T)]), value = T,invert=T)
#Combined ML data set
test <- lapply(1:length(feature_variables), function(i) {
month <- feature_variables[[i]][5]
ml_data <- read.csv(paste0("jitter_ml_data_", month, ".csv"))
#pjtn processing
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T, invert = T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]=="-Inf",i] <- 0 #if there is no data, then there was no trip
}
#sigma processing
for (i in grep('sigma', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data[,grep('thy_resv', colnames(ml_data), value=T)]), value = T,invert=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
print('issue')
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data), value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]!=1,i] <- 0
ml_data[ml_data[,i]=="-Inf",i] <- 0 #if there is no data, then there was no trip
}
#swrd
for (i in grep('swrd', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
ml_data[ml_data[,i]=="-Inf",i] <- 0
}
#temp
for (i in grep('temp', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
return(ml_data)
})
ml_data <- do.call(rbind, test)
table(complete.cases(ml_data)) #yes, 0 cases
###do some variable processing
ml_data[,grep('thy_resv_high_var', colnames(ml_data), value=T)] <- lapply(ml_data[,grep('thy_resv_high_var', colnames(ml_data), value=T)], factor)
ml_data[,'jitter'] <- as.factor(ml_data[,'jitter'])
ml_data <- ml_data[,-grep("X", colnames(ml_data))]
set.seed(144)
train_ids <- sample(nrow(ml_data), 0.60*nrow(ml_data))
train_set <- ml_data[train_ids,]
remaining <- ml_data[-train_ids,]
validation_ids <- sample(nrow(remaining), 0.2*nrow(remaining))
validation_set <- remaining[validation_ids,]
test_set <- remaining[-validation_ids]
table(train_set$jitter)
2282/nrow(train_set) #.499 accuracy
table(validation_set$jitter)
307/nrow(validation_set) #.504 accuracy
table(test_set$jitter)
1514/nrow(test_set) #.496 accuracy
table(train_set$churn)
library(dplyr)
library(ggplot2)
library(GGally)
library(caTools)
library(ROCR)
library(MASS)
library(caret)
library(dplyr)
library(rpart) # CART
library(rpart.plot) # CART plotting
library(caret) # cross validation
library(rpart)
library(randomForest)
library(gbm)
library(car)
library(stats)
library(glookoGEO)
library(dplyr)
library(ggplot2)
library(GGally)
library(caTools)
library(ROCR)
library(MASS)
library(caret)
library(dplyr)
library(rpart) # CART
library(rpart.plot) # CART plotting
library(caret) # cross validation
library(rpart)
library(randomForest)
library(gbm)
library(car)
library(stats)
library(glookoGEO)
#Combined ML data set
test <- lapply(1:length(feature_variables), function(i) {
month <- feature_variables[[i]][5]
ml_data <- read.csv(paste0("jitter_ml_data_", month, ".csv"))
#pjtn processing
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T, invert = T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]=="-Inf",i] <- 0 #if there is no data, then there was no trip
}
#sigma processing
for (i in grep('sigma', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data[,grep('thy_resv', colnames(ml_data), value=T)]), value = T,invert=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data), value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]!=1,i] <- 0
ml_data[ml_data[,i]=="-Inf",i] <- 0 #if there is no data, then there was no trip
}
#swrd
for (i in grep('swrd', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
ml_data[ml_data[,i]=="-Inf",i] <- 0
}
#temp
for (i in grep('temp', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
ml_data[ml_data[,i]=="-Inf",i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
return(ml_data)
})
ml_data <- do.call(rbind, test)
###check that cases are complete
table(complete.cases(ml_data)) #yes, 0 cases
###do some variable processing
ml_data[,grep('thy_resv_high_var', colnames(ml_data), value=T)] <- lapply(ml_data[,grep('thy_resv_high_var', colnames(ml_data), value=T)], factor)
ml_data[,'jitter'] <- as.factor(ml_data[,'jitter'])
ml_data <- ml_data[,-grep("X", colnames(ml_data))]
###Now get into the ML component of the project
set.seed(144)
#Round 1 - split the data w/o seasonality in train, validation, test sets
train_ids <- sample(nrow(ml_data), 0.60*nrow(ml_data))
train_set <- ml_data[train_ids,]
remaining <- ml_data[-train_ids,]
validation_ids <- sample(nrow(remaining), 0.2*nrow(remaining))
validation_set <- remaining[validation_ids,]
test_set <- remaining[-validation_ids]
#Baseline accuracy - predict that everything results in pjtn event
table(train_set$jitter)
2282/nrow(train_set) #.499 accuracy
table(validation_set$jitter)
307/nrow(validation_set) #.504 accuracy
table(test_set$jitter)
1514/nrow(test_set) #.496 accuracy
#Baseline accuracy - predict that every one churns
mod <- glm(jitter ~ ., data=train_set, family="binomial")
#Combined ML data set
test <- lapply(1:length(feature_variables), function(i) {
month <- feature_variables[[i]][5]
ml_data <- read.csv(paste0("jitter_ml_data_", month, ".csv"))
#pjtn processing
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T, invert = T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i] %in% c("-Inf", 'Inf'),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i] %in% c("-Inf", 'Inf'),i] <- 0 #if there is no data, then there was no trip
}
#sigma processing
for (i in grep('sigma', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i] %in% c("-Inf", 'Inf'),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data[,grep('thy_resv', colnames(ml_data), value=T)]), value = T,invert=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[ml_data[,i] %in% c("-Inf", 'Inf'),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data), value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]!=1,i] <- 0
ml_data[ml_data[,i] %in% c("-Inf", 'Inf'),i] <- 0 #if there is no data, then there was no trip
}
#swrd
for (i in grep('swrd', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
ml_data[ml_data[,i] %in% c("-Inf", 'Inf'),i] <- 0
}
#temp
for (i in grep('temp', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
ml_data[ml_data[,i] %in% c("-Inf", 'Inf'),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
return(ml_data)
})
ml_data <- do.call(rbind, test)
###check that cases are complete
table(complete.cases(ml_data)) #yes, 0 cases
###do some variable processing
ml_data[,grep('thy_resv_high_var', colnames(ml_data), value=T)] <- lapply(ml_data[,grep('thy_resv_high_var', colnames(ml_data), value=T)], factor)
ml_data[,'jitter'] <- as.factor(ml_data[,'jitter'])
ml_data <- ml_data[,-grep("X", colnames(ml_data))]
###Now get into the ML component of the project
set.seed(144)
#Round 1 - split the data w/o seasonality in train, validation, test sets
train_ids <- sample(nrow(ml_data), 0.60*nrow(ml_data))
train_set <- ml_data[train_ids,]
remaining <- ml_data[-train_ids,]
validation_ids <- sample(nrow(remaining), 0.2*nrow(remaining))
validation_set <- remaining[validation_ids,]
test_set <- remaining[-validation_ids]
#Baseline accuracy - predict that everything results in pjtn event
table(train_set$jitter)
2282/nrow(train_set) #.499 accuracy
table(validation_set$jitter)
307/nrow(validation_set) #.504 accuracy
table(test_set$jitter)
1514/nrow(test_set) #.496 accuracy
#Baseline accuracy - predict that every one churns
##Logistic Regression
mod <- glm(jitter ~ ., data=train_set, family="binomial")
mod
ml_data[is.infinite(ml_data),]
head(ml_data)
ml_data[is.finite(ml_data),]
?is.finite
is.finie(ml_data)
is.finite(ml_data)
ml_data[is.infinite(ml_data[,1]),1]
ml_data[is.infinite(ml_data[,2]),2]
ml_data[is.finite(ml_data[,2]),2]
ml_data[is.finite(ml_data[,3]),2]
ml_data[is.finite(ml_data[,3]),4]
ml_data[is.finite(ml_data[,4]),4]
ml_data[is.finite(ml_data[,5]),5]
ml_data[is.finite(ml_data[,6]),6]
ml_data[1:1000,]
ml_data$pjtn_yesterday_pjtn_average_value
ml_data[1784,]
ml_data[1784,is.infinite(pjtn_6H_pjtn_event_max_value)]
ml_data[1784,is.infinite('pjtn_6H_pjtn_event_max_value')]
ml_data[1784,'pjtn_6H_pjtn_event_max_value']
is.infinite(ml_data[1784,'pjtn_6H_pjtn_event_max_value'])
test <- lapply(1:length(feature_variables), function(i) {
month <- feature_variables[[i]][5]
ml_data <- read.csv(paste0("jitter_ml_data_", month, ".csv"))
#pjtn processing
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T, invert = T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
#ml_data[ml_data[,i] %in% c("-Inf", 'Inf'),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
ml_data[is.infinite(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[is.infinite(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
}
#sigma processing
for (i in grep('sigma', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[is.infinite(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data[,grep('thy_resv', colnames(ml_data), value=T)]), value = T,invert=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
ml_data[is.infinite(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data), value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]!=1,i] <- 0
ml_data[is.infinite(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
}
#swrd
for (i in grep('swrd', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
ml_data[is.infinite(ml_data[,i]),i] <- 0
}
#temp
for (i in grep('temp', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
ml_data[is.infinite(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
return(ml_data)
})
ml_data <- do.call(rbind, test)
table(complete.cases(ml_data)) #yes, 0 cases
ml_data[1784,]
mean(ml_data$pjtn_24H_pjtn_event_max_value)
?mean
test <- lapply(1:length(feature_variables), function(i) {
month <- feature_variables[[i]][5]
ml_data <- read.csv(paste0("jitter_ml_data_", month, ".csv"))
#pjtn processing
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T, invert = T)) {
ml_data[is.infinite(ml_data[,i]),i] <- NA #if there is no data, then there was no trip
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
#ml_data[ml_data[,i] %in% c("-Inf", 'Inf'),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
for (i in grep('pjtn_min_value', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]),value = T)) {
ml_data[is.infinite(ml_data[,i]),i] <- NA #if there is no data, then there was no trip
ml_data[is.na(ml_data[,i]),i] <- 0
#ml_data[is.infinite(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
}
#sigma processing
for (i in grep('sigma', colnames(ml_data), value=T)) {
ml_data[is.infinite(ml_data[,i]),i] <- NA #if there is no data, then there was no trip
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data[,grep('thy_resv', colnames(ml_data), value=T)]), value = T,invert=T)) {
ml_data[is.infinite(ml_data[,i]),i] <- NA #if there is no data, then there was no trip
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T))
}
#thy_resv
for (i in grep('thy_resv_high_var', colnames(ml_data), value = T)) {
ml_data[is.na(ml_data[,i]),i] <- 0
ml_data[ml_data[,i]!=1,i] <- 0
ml_data[is.infinite(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
}
#swrd
for (i in grep('swrd', colnames(ml_data), value=T)) {
ml_data[is.na(ml_data[,i]),i] <- 0 #if there is no data, then there was no trip
ml_data[is.infinite(ml_data[,i]),i] <- 0
}
#temp
for (i in grep('temp', colnames(ml_data), value=T)) {
ml_data[is.infinite(ml_data[,i]),i] <- NA #if there is no data, then there was no tri
ml_data[is.na(ml_data[,i]),i] <- as.vector(mean(ml_data[,i], na.rm=T)) #if there is no data, then there was no trip
}
return(ml_data)
})
ml_data <- do.call(rbind, test)
table(complete.cases(ml_data)) #yes, 0 cases
###do some variable processing
ml_data[,grep('thy_resv_high_var', colnames(ml_data), value=T)] <- lapply(ml_data[,grep('thy_resv_high_var', colnames(ml_data), value=T)], factor)
ml_data[,'jitter'] <- as.factor(ml_data[,'jitter'])
ml_data <- ml_data[,-grep("X", colnames(ml_data))]
set.seed(144)
#Round 1 - split the data w/o seasonality in train, validation, test sets
train_ids <- sample(nrow(ml_data), 0.60*nrow(ml_data))
train_set <- ml_data[train_ids,]
remaining <- ml_data[-train_ids,]
validation_ids <- sample(nrow(remaining), 0.2*nrow(remaining))
validation_set <- remaining[validation_ids,]
test_set <- remaining[-validation_ids]
#Baseline accuracy - predict that everything results in pjtn event
table(train_set$jitter)
2282/nrow(train_set) #.499 accuracy
table(validation_set$jitter)
307/nrow(validation_set) #.504 accuracy
table(test_set$jitter)
1514/nrow(test_set) #.496 accuracy
#Baseline accuracy - predict that every one churns
mod <- glm(jitter ~ ., data=train_set, family="binomial")
head(train_set)
summary(mod)
mod <- glm(jitter ~ ., data=train_set, family="binomial")
predTrain_mod <- predict(mod, data=train_set, type="response")
predTrain_mod
table(train_set$jitter, predTrain_mod > 0.5)
table(train_set$jitter, predTrain_mod > 1)
table(train_set$jitter, predTrain_mod > 3)
table(train_set$jitter, predTrain_mod >.9)
table(train_set$jitter)
2268/nrow(train_set) #.499 accuracy
train_set$sigma_yesterday_sigma_event_max_value
colnames(ml_data)
test <- ml_data[,-grep('pjtn_yesterday', colnames(grep('pjtn', colnames(ml_data), value=T)), value=T, invert = T)]
test <- ml_data[,-grep('pjtn_yesterday', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]), value = T,invert=T)]
test <- ml_data[,-grep('pjtn_yesterday', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]), value = F,invert=T)]
colnames(test)
ml_data_pjtn_yesterday <- ml_data[,-grep('pjtn_yesterday', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]), value = F,invert=T)]
#remove PJTN except yesterday
ml_data_pjtn_yesterday <- ml_data[,-grep('pjtn_yesterday', colnames(ml_data[,grep('pjtn', colnames(ml_data), value=T)]), value = F,invert=T)]
#Logistic Regression again
train_set <- ml_data_pjtn_yesterday[train_ids,]
remaining <- ml_data_pjtn_yesterday[-train_ids,]
validation_set <- remaining[validation_ids,]
test_set <- remaining[-validation_ids]
colnames(train_set)
mod <- glm(jitter ~ ., data=train_set, family="binomial")
head(train_set)
summary(mod)
ml_data_no_pjtn <- ml_data[,-grep('pjtn', colnames(ml_data), value = F)]
#remove all pjtn
ml_data_no_pjtn <- ml_data[,-grep('pjtn', colnames(ml_data), value = F)]
#Logistic Regression again
train_set <- ml_data_no_pjtn[train_ids,]
remaining <- ml_data_no_pjtn[-train_ids,]
validation_set <- remaining[validation_ids,]
test_set <- remaining[-validation_ids]
mod <- glm(jitter ~ ., data=train_set, family="binomial")
str(mod)
summary(mod)
head(jitte)
head(jitter)
head(train_set)
ml_data_yesterday <- ml_data[,c(grep('yesterday', colnames(ml_data), value = F), ncol(ml_data))]
colnames(ml_data_yesterday)
#Logistic Regression again
train_set <- ml_data_yesterday[train_ids,]
remaining <- ml_data_yesterday[-train_ids,]
validation_set <- remaining[validation_ids,]
test_set <- remaining[-validation_ids]
table(train_set$jitter)
mod <- glm(jitter ~ ., data=train_set, family="binomial")
mod
summary(mod)
table(train_set$jitter, predTrain_mod > 0.5)
table(train_set$jitter, predTrain_mod > 1x)
table(train_set$jitter, predTrain_mod > 1)
ml_data_yesterday <- ml_data[,c(grep('yesterday', colnames(ml_data), value = F), ncol(ml_data))]
ml_data_yesterday <- ml_data_yesterday[,-grep('pjtn', colnames(ml_data_yesterday, value=F))]
ml_data_yesterday <- ml_data_yesterday[,-grep('pjtn', colnames(ml_data_yesterday), value=F)]
colnames(ml_data_yesterday)
train_set <- ml_data_yesterday[train_ids,]
remaining <- ml_data_yesterday[-train_ids,]
validation_set <- remaining[validation_ids,]
test_set <- remaining[-validation_ids]
mod <- glm(jitter ~ ., data=train_set, family="binomial")
colnames(train_set)
str(train_set)
summary(mod)
